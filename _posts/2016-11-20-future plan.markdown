---
layout:     post
title:      暖通硕士转行后端开发之路---技术练级规划
tags:       [Career,Python,Web,BackEnd,C,Android]
date:       2016-11-20 4:00:00
author:     "CodingCrush"
---

# 辞职
2016年10月24日，刚刚好25周岁整，在奔三的路上已经走了一半。同龄人很多都已结婚生子，而我却还一事无成。后悔读研浪费了三年青春，几乎所有同学读研都是为了混文凭，鲜见有真正热爱学术的，这样的环境怎能不怀疑教育的意义？有人说过：毕业了，独立赚钱生存，才能具备自己独立的人格，深感于此，若是早毕业三年，三年前可能便转行了。
>转行虽是人生最大的决定，但却是受到内心强烈的感召，如瓜熟蒂落、水到渠成，没什么犹豫的。 

`人呐就都不知道，自己就不可以预料。一个人的命运啊，当然要靠自我奋斗，但是也要考虑到历史的进程，我绝对不知道，我作为一个暖通人怎么就去搞计算机了` 

# 接触编程的那年
转行IT，坦白地说，有一部分因素是基于薪资待遇及未来发展的考虑，从我上大学（09）年开始，移动互联网开始显露头角，从塞班到IPHONE的横空出世，再至安卓的异军突起，有幸见证了人类社会从未有过之信息革命。而信息变革最直接的体现便是薪资待遇。  
`谁会想到，高考后选的专业，可能会决定后半生的阶级,看着培训班出来的前端，轻轻松松拿着2倍多的工资，谁能忍受这个落差？？`    
其实在小时候，长大编程写厉害的软件就已经是我的唯一梦想，程序员是我那时直至现在想象中的最有趣的职业。我对于编程是天然热爱，98年？，接触Window95，震惊于电脑的神奇。在02年六年级时第一次接触BASIC语言，看的津津有味，感觉到编程也是挺简单的嘛。很入迷但苦于没有电脑，因为是农村，家庭条件一般。03年家里才买电脑，06年时初中毕业，激动的去书店买了经典的21天教程---《21天学会C语言》开始学习，也正是这本书，让年轻的我畏惧了编程。

年少无知的我，并不知道有一种生物叫作标题党，天真的我以为C语言真的可以21天学会。  
在暑假里我每天分出半天来学C语言和汇编，在编译器上实战编译，前面几章的概念确实很简单，很轻松。直到后来接触指针、链表时，便很吃力了，每天都看不完，硬啃后对概念也很疑惑其作用。
没有互联网搜索，也没有老师指导。
暑期快结束时，我有些绝望了：   
`难道我费这么大的努力只能在一个黑框框里printf操作吗？？？
这些代码又怎么能够操作计算机去干那么多复杂的工作？？
究竟是何等天才才能用这些写出操作系统来？`

那时候我绝望的认为，不能快速掌握是我的智力不够。
既然这本书叫做21天学通C语言，那么便真的有人能够21天学会并熟练使用，编程应是少数天才做的事，我这样的愚人没有天分。我对学习的认识简单到认为所有知识便该如初中的课程一样，一看就会，努力是笨蛋做的事情。
用长者的话来说，我真是  
`Too Young,Too Simple,Sometimes Naive`       
倘若能人告诉我：“没有人能在21天内掌握C语言，初学者应该从VB或Python入门”。
或许，我也不会与编程失之交臂，一误十年。
我非常羡慕知乎上那些很小接触编程而且坚持下来的，比如VCZH，如果我能和他一样从VB入门，最初在IDE下编程，与GUI交互，一开始便能体验到编程的乐趣，那该多美啊~~

# 认识自己
硕士毕业后，从事我的本行暖通。  
说实在的，我对暖通没什么兴趣，七年浑浑噩噩。  
大学期间，我更倾向于是一个CS生而非暖通，事实也确实如此：   
`大三建立大学贴吧，学校里小有名气；    
炒比特币，LiteCoin挖矿，在虚拟货币中小赚一笔；     
喜欢硬件、修理技术好；    
喜欢玩数码产品，摄影PS技术不错；   
单片机、Arduino等也略懂一二;  `  

相比之下，我对暖通的学习仅仅浅尝辄止，及格就好。
这种学科，一点儿也不好玩，未来工资低发展不好，努力学习没有回报。    
我甚至怀疑我是否并不适合学习，怀疑我的毅力及恒心。  
大学做的最有意义的事，是管理了学校贴吧，开拓了眼界视野，深邃了思想。  

`梦里不知身是客，一响贪欢`是我毕业的感慨。
毕业不到半年，怀念起无忧无虑校园生活已是恍如隔世。   
第一份工作，枯燥乏味的图农让我极度焦虑于未来发展。  
与此同时，同事们想的只是过简单的日子，下班一起打游戏。   

`他们的身上，是我几年后的影子吗？`

我想相较于养家糊口我更需要的是一份真正热爱终身的事业。  

# 重新接触编程
公司部门有一个遗留的ACCESS数据库，用来计算空调箱的物料清单，有一些功能并不理想，我喜欢钻研的精神又促使我想要对其进行改造分析，自费买了本ACCESS教程，看了一个多星期发现并不困呢，便开始改造。    

直到现在我特认为VBA易学易用，不区分大小写，没有乱七八糟的花括号，适用性很广。EXCEL AUTOCAD ACCESS等，是非IT从业者最值得学习的脚本语言。   
 
接触VB之后，我每天都在研究各种功能，沉迷于此以至于废寝忘食，甚至于梦里也是敲代码。    

一个月很快，我弄出了新版的BOM系统，支持料号快速修改，支持表格制作，快速排版，物料统计等全新功能，尤其是物料统计，用这个统计空调箱物料的同事，没有再漏过物料。   
 
做这个小软件的过程中，我学习了SQL语句，理解了面对对象编程的概念,后面学Python上手也比较快。同时也意识到：  
>编程是可以很快出成果的，而非在C里学了很久也不知道有何意义。  

# Python与Web开发
从8月开始Python学习。初始，并没有打算从事WEB开发，我更希望可以选择数据挖掘、数据分析的岗位。然而，公司订单奇多，加班太多，学习进度比较缓慢。
九月中旬，原工作试用期满转正，我愤怒但无奈地面对了一个问题：  
`转正后的薪水竟然达不到招聘时的最低承诺。`    
与部门总监谈话之后，他告诉我：部门工资都不高，新人工资上调空间有限，需要考虑部门内部平衡。他所言不假：
`部门里干了五六年的主管工资才六七千！！！尽管离开了这个主管，公司会遭受巨大的损失，但是他在这家公司里沉淀多年的机械设计经验在其他公司毫无作用。因此公司不担心他跳槽，剥削他的剩余价值时毫不手软。`   
我立即意识到:  
`这家公司是一片平静的沼泽，如果我继续留在这儿，会越陷越深。我所有学习的经验，当换一家暖通公司之后，便一文不值。`   
我离开对这家公司放弃了所有期望，即使工资X2，我也绝不愿将自己绑在这儿。那段时间我的脑子里只想着如何才能快速转行？怎么才能逃离枯燥的工作？每一天，我觉得自己在持续贬值。   
`既然编程那么有乐趣，远甚于我的工作，为什么不去做呢？人没有梦想，和咸鱼有何区别？`  
  
我一改以往工作狂(七月八月时曾连续加班40天，中间没有休息过任何一天)的表现，9月20日后我拒绝了主管与总监要求的加班，傍晚下班准时走，吃完饭后立刻回宿舍学习。随着学习的加快，在知乎上看了很多相关文章后，我发现WEB开发的门槛较低，比较适合我这种菜鸟。根据萧井陌的教程，我选择了从FLASK入门。   

`这一段时间，每天都反复的看知乎，搜寻一些转行成功人的经验，看了一遍又一遍，虽然愚蠢，但每个转行之人内心想必也曾如我般彷徨迷茫吧？`   

9月28日，《FLASK WEB开发到手》，开始FLASK的实战，国庆七天在家每天痴迷编程，用一个小段子描述自己当时的状态：  

    编程入魔，不能自已。
    晨思暮想，昼夜交替。

# 入门阶段内的实际操作
萧大的[编程入门指南](https://zhuanlan.zhihu.com/p/19959253)确实不错，其中推荐的[MIT编程导论](http://open.163.com/special/opencourse/bianchengdaolun.html)与书籍,都是经典。美中不足的是，我觉得这份教程更适合有整片连续时间的学生学习。工作之后时间碎片化，SICP这本书在断断续续的时间内我真的啃不下来。
  
更适合我的是有反馈的学习，我的理念是：
>需求驱动学习，将粗粒度的大目标细化成很多小目标，分而治之。

同时，当我在微博上表达了我转行的目标后，葛晓 同学 在微信上分享了我一份GITBOOK教程,[程序员的自我修养](https://leohxj.gitbooks.io/a-programmer-prepares/content/programmer-basic/index.html)。看完之后，我发现了一篇好文[程序员技术练级攻略](http://coolshell.cn/articles/4990.html)，文章的实战步骤细化的比较详细，陈皓 大牛眼光也相当有前瞻性。跟着这样的大牛走，总是没错的，我便决定按照这篇文章分解的小目标展开学习计划。   
![target](/img/1120_2.jpg)
  
在学习初至现在(11月20日)我完成的小目标：

1.入门脚本语言Python与VBA：  
+ 使用Python处理本地txt与csv，读取后逐行处理；  
+ 使用Python标准库遍历本地文件系统，统计文件大小与修改时间；  
+ 使用Python连接sqlite，读取与写入；  
+ 使用VBA对EXCEL进行数据分析计算与进行格式整理；  
+ 使用VBA控制ACCESS数据库，结合SQL进行数据统计，报表生成；  
+ 使用VBA控制AutoCad,从EXCEL中读取数据，自动绘制钣金展开图；  

2.掌握纯文本编辑器与IDE：  
+ Vim / Notepad++，分别在Linux与Windows下使用；  
+ Pycharm,用了之后发现真心好用,用IDE配置GIT、flake8、VirtualVenv;

3.掌握常见Linux Shell的命令：  
+ 使用man来查看帮助；  
+ 文件系统结构和基本操作 ls/chmod/chown/rm/find/cat/mkdir/scp；  
+ 文本操作命令 awk/grep/less/more/cat；  
+ 管理命令 ps/top/netstat/kill/；  
+ 使用守护进程 crontab；  
+ /etc目录下的各种配置文章；  
+ [正则表达式](http://deerchao.net/tutorials/regex/regex.htm)，使用正则表达式来查找文件内容；  

4.WEB基础学习：  
+ 在W3CSCHOOL过了一遍HTML和CSS语法，能写一部分；  
+ 掌握Chrome动态修改网页结构；  
+ 在W3CSCHOOL过了一遍JAVASCRIPT,能看懂代码，理解DOM；  
+ 简单的过了遍jQuery库，理解jQuery的作用；  
+ 完整的看完《图解HTTP》,理解REST，理解HTTP的请求响应组成；  
+ 使用FLASK做了个简单的个人博客网站；  
+ 买了域名，用GitPages+Jekyll搭建博客网站；  
+ 理解Django框架，掌握RESTful API设计；  
+ 掌握Docker容器的打包，虚拟环境的使用；  

5.其他：  
+ 掌握GIT，掌握多人协作下冲突的解决  
+ 了解代码规范pep8，配置代码检查工具flake8，了解静态检查工具pylint;  
+ 看完（麻省理工免费课程）计算机科学和编程导论；
+ 使用纯英文Linux环境，习惯Google与StackOverFlow搜索；
+ 无障碍的查阅检索官方API英文tutorial阅读能力；

# 面试
国庆之后，迫不及待准备写简历找工作，原公司过不久便会安排我出差到工地负责机电项目，这个项目一旦开始，到明年四月份截至，除了春节都不可能离开工地。10月15日左右开始投简历。在51JOB上投出去20份，收到3个面试机会，只试了其中一家公司，也就是现在这家。   
笔试考了张简单的试卷，基本都能答上：语法基础、表达式、字符频次统计、Python标准库、MVC框架的理解，Python2与3之间的区别、最后是一道取水的智力题（回去时才发现做复杂了），面试时技术主管Y哥问了些Python数据结构、linux操作、以及数据库方面的知识，可能Y哥看我是哥转行的菜鸟，并没有为难我。   
最后HR和我交流了二十分钟，全程一直在我为什么愿意抛弃七年所学而转行这个选择上而提出质疑。虽然她的问题比较尖锐，但我转行的想法是非常坚定的，并不畏惧她的质疑。我告诉她  
`转行来做开发，对我来虽是沉没成本，却更是及时止损`

# WEB服务端的学习(LNMP)
公司是IT界的传统行业，属于广电系统，我所属的部门主打教育。小组里面试我的Y哥是复旦CS牛人，专业从事Python后端开发，名校帅哥，明明可以靠脸吃饭为什么要来写程序！！！工作半个后，接触到了真实的生产环境，了解到实际业务的需求，学到了很多，也懂得了自己在哪方面的知识比较薄弱。因此这数个月至过年后，我将重点学习后端开发中的服务端环境。我不想花费大量宝贵的业余精力去学会框架的旁枝末节，那并非重点，框架的东西更应该留在工作实践中去逐渐深入了解。  
有幸买到@董伟明 的《Python Web开发实战》，这是一本非常适合Python后端开发人员看的实战书籍。
我相信，啃下这本书之后，我的Python后端开发可以登堂入室，早日加薪。 
  
从生产环境与书中的知识点出发，我罗列了以下需要重点学习的工具及知识点:
+ WEB服务器，Nignix的部署使用；  
+ Linux发行版,CentOS7 WEB Server的使用；  
+ PostgreSQL数据库的使用（项目需要）；  
+ 缓存系统Memcached与Redis；  
+ 进程管理组件Supervisor;  
+ 应用部署工具Fabic;  
+ 在项目中学习单元测试；  
+ RESTful API的设计，Swagger的使用;  
+ 消息队列与Celery的使用；  
+ Python并发编程的数个解决方案  
+ 了解TDD测试驱动开发；

这些方面，不求学精，仅以掌握使用为目标来说，两个月应该足够了。

# 进阶深化学习
WEB服务端的基本环境学习之后，没有计算机科班基础的菜鸟，该好好补课了。
学习C语言并不意味着我打算写C语言。我觉得：  
`未来的软件开发会越来越趋向于高级应用与算法应用开发，移动互联网未来会稳定发展，而机器学习与机器视觉则会加速发展，我希望能朝机器学习方向深入，但，即使高级的框架推陈出新、迅速迭代，学习基础的东西是永不过时的`

1.C语言与Linux系统基础
+ 学习《深入理解计算机系统》；  
+ 学习《C Primer Plus》，用C实现一下各种经典的算法和[数据结构](https://visualgo.net/)；  
+ 学习Linux系统调用，了解系统层面的东西,实现一个可以拷贝目录树的小程序；  
+ 用fork/wait/waitpid写一个多进程的程序  
+ 用pthread写一个多线程带同步或互斥的程序。多线程多进程购票的程序； 
+ signal/kill/raise/alarm/pause/sigprocmask实现一个多进程间的信号量通信的程序；  
+ 学会使用gcc和gdb来编程和调试程序；  
+ 学会使用makefile来编译程序； 

`实践任务:如果有时间，用C实现一个解魔方的机器人，用Arduino控制板加寄存器控制8个步进电机，其中4个控制魔方旋转，4个控制位移，用摄像头进行颜色识别`

2.Android与GUI开发（移动端开发不大了解）
+ 学习Java语言；  
+ 掌握Android studio的使用；  
+ 学习Andorid SDK；  
+ 了解一下Java这种虚拟机语言和C和Python语言在编译和执行上的差别； 

`实践任务:完成一个RSS订阅阅读的APP`

3.Web的安全与架构：
+ 学习HTML5与CSS3；  
+ 学习Web开发的安全问题；  
+ 学习HTTP Server的rewrite机制，Nginx的反向代理机制，fast-cgi；  
+ 学习Web的静态页面缓存技术；  
+ 学习Web的异步工作流处理，数据Cache，数据分区，负载均衡，水平扩展的构架；  

`实践任务:使用HTML5的canvas 制作一些Web动画`,`尝试在前面开发过的那个Web应用中进行SQL注入，JS注入，以及XSS攻击`  

4.学习关系型数据库:  
+ 通过MySQL来学习数据库；  
+ 学习数据库设计范式，1NF，2NF，3NF；  
+ 学习数据库的存过，触发器，视图，建索引，游标等；  
+ 明白表连接的各种概念;  
+ 学习如何优化数据库查询;  

`实践任务：设计一个论坛的数据库，至少满足3NF，使用SQL语句查询本周，本月的最新文章，评论最多的文章最活跃用户`

# 总结
`软件开发的学习，是一种即时反馈性的体验，产生的正反馈能增加学习乐趣与学习动力。 暖通的学习也有反馈，但却是负反馈居多，因此生成了闭环系统。`  

将工作与兴趣相结合，每天我都有一种幸福的体验。 用一个词来形容我现在的状态，那便是如鱼得水。 离开水我固然也能够存活，但在水里我会过的更好。 在我三分之一的人生已经走过了太长的弯路，才愈发觉得选择的重要性：
`努力当然重要，更重要的是要做出明智的选择。`

传统行业，重资产，轻生产力，人更多的担任的是操作工的角色。 在IT行业中，资产配置不是主要支出，人既是生产力，又是生产资料，重要性不言而明。 从客观角度而言，选择了IT行业，我的劳动稀缺度与附加值将会更高。 从主观角度，我渴望的是一份生活与工作没有明显界限，有深度与上升空间的工作。 从技术角度来看，即使是十年后，我的编程水平依然糟糕，回去做暖通，我之前的知识储备仍然不会过时。

以上的任务是我一年半内的规划，我不知道我何时可以开始完成计划，
但我知道，只要我认真去做，那一天一定会比我预料的要提前到来。
只有做完这些，才可以达到我心中觉得标准的CS应届本科生水平。

>开发的工作对我而言不是终点，而是起点。    
>强烈的技术焦虑症会促使着我持续深入学习,  
>路漫漫其修远兮，吾将上下而求索。   
